Usage examples

java algator.Analyse RunOne BasicSort -a BubbleSort -s {"N":500} -t 2 -te 10
  Run BubbleSort with N=500 (for other parameters ALGator uses a default value). Time limit: 2s, number of executions (of this test): 10.

java algator.Analyse RunOne BasicSort -a BubbleSort -s "{N:30000, DORDER:'0.9', GeneratorType:3}" -te 10 -t 5
  Use Type3 generator with DORDER=0.9

java algator.Analyse RunOne IntegerFactorization -s '{"GeneratorType":"2", "Number":"15"}'
  Generate test case with generator of type TYPE2 with generating parameter number=15.

java algator.Analyse FindLimit BasicSort -p N
  Finds a limit for N for all algorithms of BasicSort (and default values of other parameters)

java algator.Analyse FindLimit BasicSort -a BubbleSort -p N
   Finds a limit for N for BubbleSort algorithm (and default values of other parameters)

java algator.Analyse FindLimit BasicSort -p N -a InsertionSort -s '{Group:SORTED}' -v 2

java algator.Analyse FindLimits BasicSort -a JavaSort -p N
  Finds limits for all possible combinations of emun parameters

java algator.Analyse FindLimits BasicSort -a JavaSort -p N -s {Div:SMALL}
  Finds limits for all possible combinations of emun parameters where Div=SMALL

java algator.Analyse TimeComplexity BasicSort -s "{"mode":"outliers", "testSet":"TestSet1", "M":2.4, "observedValue":"Tfirst"}" -p N -v 1 -a InsertionSort
    Finds outliers of InsertionSort algorithm on test set TestSet1, when observed value is Tfirst and threshold for outliers is set to M=2.4.
    
java algator.Analyse TimeComplexity BasicSort -s "{"mode":"PowerLawPredictor", "testSet":"TestSet2", "observedValue":"Tavg", "data":"all"}" -p N -v 1 -a InsertionSort
    Finds power law function, that has minimum least squares error for InsertionSort algorithm on test set TestSet2, when observed value is Tavg and all points are taken into consideration.
    
java algator.Analyse TimeComplexity BasicMatrixMul -s "{"mode":"PowerLawPredictor", "testSet":"TestSet2", "observedValue":"TFirst", "data":"subintervals"}" -p N -v 1 -a Strassen
    Finds power law function, that has minimum least squares error for Strassen algorithm on test set TestSet2, when observed value is TFirst and only first points of found subintervals are taken into consideration.
    
java algator.Analyse TimeComplexity BasicSort -s "{"mode":"LeastSquaresPredictor", "testSet":"TestSet1", "observedValue":"Tavg"}" -p N -v 1 -a QuickSort
    Finds function that approximates QuickSort minimising least squares error on test set TestSet1, when observed value is Tavg.
    
java algator.Analyse TimeComplexity BasicSort -s "{"mode":"GAPredictor", "testSet":"TestSet2", "observedValue":"Tavg", "numberOfAllPopulations": 20, "populationSize": 200, "funcNumber":4, "iter": 10, "onePopulationIter": 20}" -p N -v 1 -a QuickSort
    Finds function that approximates measurement of QuickSort algorithm on test set TestSet2 when observed value is Tavg using genetic algorithm with multiple populations. Each population consists of 200 individuals, and there are total 20 populations. funcNumber defines number of basic functions which will compose final result. onePopulationIter defines number of generations inside one population, and iter defines number of migrations between distinct populations. All together there is iter*onePopulationIter generations.

java algator.Analyse TimeComplexity BasicSort -s "{"mode":"CompareAlgorithms", "testSet":"TestSet1", "observedValue":"Tavg"}" -p N -v 1
    Computes values for algorithms from project BasicSort on test set TestSet1 and obsered value is Tavg. Lower value indicates faster algorithm.
