{"Presenter": {
  "Author": "tomaz",
  "Date": "January 2024",
  "Title": " Sorting sorted arrays ",
  "ShortTitle": "Sorted arrays",
  "Description": "",
  "Query": {
    "Algorithms": [
      "InsertionSort",
      "JavaSort",
      "QuickSort"
    ],
    "Count": false,
    "Filter": null,
    "GroupBy": ["N"],
    "Indicators": [
      "*EM",
      "SWAP",
      "CMP",
      "@SWAP+@CMP AS OP"
    ],
    "Parameters": ["N"],
    "SortBy": [],
    "TestSets": ["TestSet3"]
  },
  "Layout": [
    [
      "TextBox_1",
      "Graph_1",
      "Table_1"
    ],
    [
      "TextBox_2",
      "Graph_2"
    ]
  ],
  "Descripotion": "Sorting already sorted data (TestSet3)",
  "Graph_1": {
    "xAxis": "N",
    "yAxes": ["*.Tmin"],
    "graphTypes": "",
    "xAxisTitle": "",
    "yAxisTitle": "",
    "categoryLabels": false,
    "gridX": false,
    "gridY": false,
    "logScale": false,
    "manData": {},
    "subchart": false,
    "zoom": false
  },
  "TextBox_1": {"htmltext": "<div class=\"col-md-12\" id=\"htmlpresenter3\">When sorting already sorted arrays, we get interesting (though not surprising) results. In this case, InsertionSort takes a linear number of steps, which makes it significantly faster than QuickSort. JavaSort, on the other hand, performs a preliminary check and detects that the data is already sorted, allowing it to run even faster than InsertionSort.<\/div>"},
  "Table_1": {"Columns": [
    "*.Tmin",
    "N"
  ]},
  "LastModified": 1740567571,
  "Graph_2": {
    "xAxis": "N",
    "yAxes": [
      "InsertionSort.SWAP",
      "InsertionSort.CMP",
      "QuickSort.SWAP",
      "QuickSort.CMP"
    ],
    "graphTypes": "",
    "xAxisTitle": "",
    "yAxisTitle": "",
    "categoryLabels": false,
    "gridX": false,
    "gridY": false,
    "logScale": false,
    "manData": {},
    "subchart": false,
    "zoom": false
  },
  "TextBox_2": {"htmltext": "<div>This graph shows the number of comparisons (CMP) and element exchanges (SWAP) made during the execution of InsertionSort and QuickSort, highlighting why the former is faster than the latter. While the number of swaps is low in both cases (note that InsertionSort does not perform any swaps at all),&nbsp; QuickSort executes significantly more comparisons than InsertionSort.<\/div>"}
}}
